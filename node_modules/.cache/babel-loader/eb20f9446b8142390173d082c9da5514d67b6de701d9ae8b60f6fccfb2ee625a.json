{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\testbementor\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport toast from 'react-hot-toast';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check for existing token on app load\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        const decoded = jwtDecode(token);\n        if (decoded.exp * 1000 > Date.now()) {\n          setCurrentUser(decoded);\n        } else {\n          localStorage.removeItem('token');\n        }\n      } catch (error) {\n        localStorage.removeItem('token');\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password, role) => {\n    try {\n      // Mock API call - replace with actual backend\n      const mockUsers = [{\n        id: 1,\n        email: 'student@example.com',\n        password: 'password123',\n        role: 'student',\n        name: 'John Student',\n        avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face'\n      }, {\n        id: 2,\n        email: 'teacher@example.com',\n        password: 'password123',\n        role: 'teacher',\n        name: 'Dr. Sarah Johnson',\n        avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face'\n      }];\n      const user = mockUsers.find(u => u.email === email && u.password === password && u.role === role);\n      if (!user) {\n        throw new Error('Invalid credentials');\n      }\n\n      // Mock JWT token\n      const token = btoa(JSON.stringify({\n        id: user.id,\n        email: user.email,\n        role: user.role,\n        name: user.name,\n        avatar: user.avatar,\n        exp: Date.now() + 24 * 60 * 60 * 1000 // 24 hours\n      }));\n      localStorage.setItem('token', token);\n      setCurrentUser({\n        id: user.id,\n        email: user.email,\n        role: user.role,\n        name: user.name,\n        avatar: user.avatar\n      });\n      toast.success(`Welcome back, ${user.name}!`);\n      return true;\n    } catch (error) {\n      toast.error(error.message || 'Login failed');\n      return false;\n    }\n  };\n  const signup = async userData => {\n    try {\n      // Mock API call - replace with actual backend\n      const newUser = {\n        id: Date.now(),\n        ...userData,\n        avatar: `https://images.unsplash.com/photo-${Math.floor(Math.random() * 1000000)}?w=150&h=150&fit=crop&crop=face`\n      };\n\n      // Mock JWT token\n      const token = btoa(JSON.stringify({\n        id: newUser.id,\n        email: newUser.email,\n        role: newUser.role,\n        name: newUser.name,\n        avatar: newUser.avatar,\n        exp: Date.now() + 24 * 60 * 60 * 1000 // 24 hours\n      }));\n      localStorage.setItem('token', token);\n      setCurrentUser({\n        id: newUser.id,\n        email: newUser.email,\n        role: newUser.role,\n        name: newUser.name,\n        avatar: newUser.avatar\n      });\n      toast.success('Account created successfully!');\n      return true;\n    } catch (error) {\n      toast.error(error.message || 'Signup failed');\n      return false;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setCurrentUser(null);\n    toast.success('Logged out successfully');\n  };\n  const value = {\n    currentUser,\n    login,\n    signup,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","api","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","token","localStorage","getItem","decoded","jwtDecode","exp","Date","now","removeItem","error","login","email","password","role","mockUsers","id","name","avatar","user","find","u","btoa","JSON","stringify","setItem","success","message","signup","userData","newUser","Math","floor","random","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/admin/Desktop/testbementor/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport toast from 'react-hot-toast';\r\nimport api from '../services/api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check for existing token on app load\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      try {\r\n        const decoded = jwtDecode(token);\r\n        if (decoded.exp * 1000 > Date.now()) {\r\n          setCurrentUser(decoded);\r\n        } else {\r\n          localStorage.removeItem('token');\r\n        }\r\n      } catch (error) {\r\n        localStorage.removeItem('token');\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password, role) => {\r\n    try {\r\n      // Mock API call - replace with actual backend\r\n      const mockUsers = [\r\n        {\r\n          id: 1,\r\n          email: 'student@example.com',\r\n          password: 'password123',\r\n          role: 'student',\r\n          name: 'John Student',\r\n          avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face'\r\n        },\r\n        {\r\n          id: 2,\r\n          email: 'teacher@example.com',\r\n          password: 'password123',\r\n          role: 'teacher',\r\n          name: 'Dr. Sarah Johnson',\r\n          avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face'\r\n        }\r\n      ];\r\n\r\n      const user = mockUsers.find(u => u.email === email && u.password === password && u.role === role);\r\n      \r\n      if (!user) {\r\n        throw new Error('Invalid credentials');\r\n      }\r\n\r\n      // Mock JWT token\r\n      const token = btoa(JSON.stringify({\r\n        id: user.id,\r\n        email: user.email,\r\n        role: user.role,\r\n        name: user.name,\r\n        avatar: user.avatar,\r\n        exp: Date.now() + 24 * 60 * 60 * 1000 // 24 hours\r\n      }));\r\n\r\n      localStorage.setItem('token', token);\r\n      setCurrentUser({\r\n        id: user.id,\r\n        email: user.email,\r\n        role: user.role,\r\n        name: user.name,\r\n        avatar: user.avatar\r\n      });\r\n\r\n      toast.success(`Welcome back, ${user.name}!`);\r\n      return true;\r\n    } catch (error) {\r\n      toast.error(error.message || 'Login failed');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const signup = async (userData) => {\r\n    try {\r\n      // Mock API call - replace with actual backend\r\n      const newUser = {\r\n        id: Date.now(),\r\n        ...userData,\r\n        avatar: `https://images.unsplash.com/photo-${Math.floor(Math.random() * 1000000)}?w=150&h=150&fit=crop&crop=face`\r\n      };\r\n\r\n      // Mock JWT token\r\n      const token = btoa(JSON.stringify({\r\n        id: newUser.id,\r\n        email: newUser.email,\r\n        role: newUser.role,\r\n        name: newUser.name,\r\n        avatar: newUser.avatar,\r\n        exp: Date.now() + 24 * 60 * 60 * 1000 // 24 hours\r\n      }));\r\n\r\n      localStorage.setItem('token', token);\r\n      setCurrentUser({\r\n        id: newUser.id,\r\n        email: newUser.email,\r\n        role: newUser.role,\r\n        name: newUser.name,\r\n        avatar: newUser.avatar\r\n      });\r\n\r\n      toast.success('Account created successfully!');\r\n      return true;\r\n    } catch (error) {\r\n      toast.error(error.message || 'Signup failed');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setCurrentUser(null);\r\n    toast.success('Logged out successfully');\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    login,\r\n    signup,\r\n    logout,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}