{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{useAuth}from'./AuthContext';import{jsx as _jsx}from\"react/jsx-runtime\";const ChatContext=/*#__PURE__*/createContext();export const useChat=()=>{const context=useContext(ChatContext);if(!context){throw new Error('useChat must be used within a ChatProvider');}return context;};export const ChatProvider=_ref=>{let{children}=_ref;const{currentUser}=useAuth();const[socket,setSocket]=useState(null);const[conversations,setConversations]=useState([]);const[activeConversation,setActiveConversation]=useState(null);const[messages,setMessages]=useState({});const[unreadCount,setUnreadCount]=useState(0);// Mock conversations data\nconst mockConversations=[{id:1,participants:[{id:1,name:'John Student',avatar:'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face'},{id:2,name:'Dr. Sarah Johnson',avatar:'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face'}],lastMessage:{text:'Thank you for the lesson!',timestamp:new Date(Date.now()-1000*60*30),// 30 minutes ago\nsenderId:1},unreadCount:0},{id:2,participants:[{id:1,name:'John Student',avatar:'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face'},{id:3,name:'Prof. Michael Chen',avatar:'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face'}],lastMessage:{text:'When is our next session?',timestamp:new Date(Date.now()-1000*60*60*2),// 2 hours ago\nsenderId:3},unreadCount:1}];// Mock messages data\nconst mockMessages={1:[{id:1,text:'Hi Dr. Johnson, I need help with calculus',senderId:1,timestamp:new Date(Date.now()-1000*60*60*24),// 1 day ago\ntype:'text'},{id:2,text:'Of course! I\\'d be happy to help. What specific topic are you struggling with?',senderId:2,timestamp:new Date(Date.now()-1000*60*60*23),// 23 hours ago\ntype:'text'},{id:3,text:'Thank you for the lesson!',senderId:1,timestamp:new Date(Date.now()-1000*60*30),// 30 minutes ago\ntype:'text'}],2:[{id:4,text:'Hello Professor Chen',senderId:1,timestamp:new Date(Date.now()-1000*60*60*3),// 3 hours ago\ntype:'text'},{id:5,text:'When is our next session?',senderId:3,timestamp:new Date(Date.now()-1000*60*60*2),// 2 hours ago\ntype:'text'}]};useEffect(()=>{if(currentUser){// Initialize conversations and messages\nsetConversations(mockConversations);setMessages(mockMessages);// Calculate unread count\nconst totalUnread=mockConversations.reduce((sum,conv)=>sum+conv.unreadCount,0);setUnreadCount(totalUnread);// Mock Socket.IO connection\nconst mockSocket={emit:(event,data)=>{console.log('Socket emit:',event,data);// Simulate message delivery\nif(event==='send_message'){setTimeout(()=>{const newMessage={id:Date.now(),text:data.text,senderId:currentUser.id,timestamp:new Date(),type:'text'};setMessages(prev=>({...prev,[data.conversationId]:[...(prev[data.conversationId]||[]),newMessage]}));},1000);}},on:(event,callback)=>{console.log('Socket listening for:',event);},disconnect:()=>{console.log('Socket disconnected');}};setSocket(mockSocket);}else{setSocket(null);setConversations([]);setMessages({});setActiveConversation(null);setUnreadCount(0);}},[currentUser]);const sendMessage=(conversationId,text)=>{if(!socket||!text.trim())return;const messageData={conversationId,text:text.trim(),senderId:currentUser.id};socket.emit('send_message',messageData);// Optimistically add message to UI\nconst newMessage={id:Date.now(),text:text.trim(),senderId:currentUser.id,timestamp:new Date(),type:'text'};setMessages(prev=>({...prev,[conversationId]:[...(prev[conversationId]||[]),newMessage]}));// Update conversation last message\nsetConversations(prev=>prev.map(conv=>conv.id===conversationId?{...conv,lastMessage:{text:text.trim(),timestamp:new Date(),senderId:currentUser.id}}:conv));};const createConversation=(participantId,participantName,participantAvatar)=>{const newConversation={id:Date.now(),participants:[{id:currentUser.id,name:currentUser.name,avatar:currentUser.avatar},{id:participantId,name:participantName,avatar:participantAvatar}],lastMessage:null,unreadCount:0};setConversations(prev=>[newConversation,...prev]);setMessages(prev=>({...prev,[newConversation.id]:[]}));setActiveConversation(newConversation.id);return newConversation.id;};const markConversationAsRead=conversationId=>{setConversations(prev=>prev.map(conv=>conv.id===conversationId?{...conv,unreadCount:0}:conv));// Recalculate total unread count\nconst updatedConversations=conversations.map(conv=>conv.id===conversationId?{...conv,unreadCount:0}:conv);const totalUnread=updatedConversations.reduce((sum,conv)=>sum+conv.unreadCount,0);setUnreadCount(totalUnread);};const value={socket,conversations,activeConversation,messages,unreadCount,sendMessage,createConversation,setActiveConversation,markConversationAsRead};return/*#__PURE__*/_jsx(ChatContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useAuth","jsx","_jsx","ChatContext","useChat","context","Error","ChatProvider","_ref","children","currentUser","socket","setSocket","conversations","setConversations","activeConversation","setActiveConversation","messages","setMessages","unreadCount","setUnreadCount","mockConversations","id","participants","name","avatar","lastMessage","text","timestamp","Date","now","senderId","mockMessages","type","totalUnread","reduce","sum","conv","mockSocket","emit","event","data","console","log","setTimeout","newMessage","prev","conversationId","on","callback","disconnect","sendMessage","trim","messageData","map","createConversation","participantId","participantName","participantAvatar","newConversation","markConversationAsRead","updatedConversations","value","Provider"],"sources":["C:/Users/admin/Desktop/testbementor/src/contexts/ChatContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { useAuth } from './AuthContext';\r\n\r\nconst ChatContext = createContext();\r\n\r\nexport const useChat = () => {\r\n  const context = useContext(ChatContext);\r\n  if (!context) {\r\n    throw new Error('useChat must be used within a ChatProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const ChatProvider = ({ children }) => {\r\n  const { currentUser } = useAuth();\r\n  const [socket, setSocket] = useState(null);\r\n  const [conversations, setConversations] = useState([]);\r\n  const [activeConversation, setActiveConversation] = useState(null);\r\n  const [messages, setMessages] = useState({});\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n\r\n  // Mock conversations data\r\n  const mockConversations = [\r\n    {\r\n      id: 1,\r\n      participants: [\r\n        { id: 1, name: 'John Student', avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face' },\r\n        { id: 2, name: 'Dr. Sarah Johnson', avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face' }\r\n      ],\r\n      lastMessage: {\r\n        text: 'Thank you for the lesson!',\r\n        timestamp: new Date(Date.now() - 1000 * 60 * 30), // 30 minutes ago\r\n        senderId: 1\r\n      },\r\n      unreadCount: 0\r\n    },\r\n    {\r\n      id: 2,\r\n      participants: [\r\n        { id: 1, name: 'John Student', avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face' },\r\n        { id: 3, name: 'Prof. Michael Chen', avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face' }\r\n      ],\r\n      lastMessage: {\r\n        text: 'When is our next session?',\r\n        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2), // 2 hours ago\r\n        senderId: 3\r\n      },\r\n      unreadCount: 1\r\n    }\r\n  ];\r\n\r\n  // Mock messages data\r\n  const mockMessages = {\r\n    1: [\r\n      {\r\n        id: 1,\r\n        text: 'Hi Dr. Johnson, I need help with calculus',\r\n        senderId: 1,\r\n        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24), // 1 day ago\r\n        type: 'text'\r\n      },\r\n      {\r\n        id: 2,\r\n        text: 'Of course! I\\'d be happy to help. What specific topic are you struggling with?',\r\n        senderId: 2,\r\n        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 23), // 23 hours ago\r\n        type: 'text'\r\n      },\r\n      {\r\n        id: 3,\r\n        text: 'Thank you for the lesson!',\r\n        senderId: 1,\r\n        timestamp: new Date(Date.now() - 1000 * 60 * 30), // 30 minutes ago\r\n        type: 'text'\r\n      }\r\n    ],\r\n    2: [\r\n      {\r\n        id: 4,\r\n        text: 'Hello Professor Chen',\r\n        senderId: 1,\r\n        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 3), // 3 hours ago\r\n        type: 'text'\r\n      },\r\n      {\r\n        id: 5,\r\n        text: 'When is our next session?',\r\n        senderId: 3,\r\n        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2), // 2 hours ago\r\n        type: 'text'\r\n      }\r\n    ]\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      // Initialize conversations and messages\r\n      setConversations(mockConversations);\r\n      setMessages(mockMessages);\r\n      \r\n      // Calculate unread count\r\n      const totalUnread = mockConversations.reduce((sum, conv) => sum + conv.unreadCount, 0);\r\n      setUnreadCount(totalUnread);\r\n\r\n      // Mock Socket.IO connection\r\n      const mockSocket = {\r\n        emit: (event, data) => {\r\n          console.log('Socket emit:', event, data);\r\n          // Simulate message delivery\r\n          if (event === 'send_message') {\r\n            setTimeout(() => {\r\n              const newMessage = {\r\n                id: Date.now(),\r\n                text: data.text,\r\n                senderId: currentUser.id,\r\n                timestamp: new Date(),\r\n                type: 'text'\r\n              };\r\n              \r\n              setMessages(prev => ({\r\n                ...prev,\r\n                [data.conversationId]: [...(prev[data.conversationId] || []), newMessage]\r\n              }));\r\n            }, 1000);\r\n          }\r\n        },\r\n        on: (event, callback) => {\r\n          console.log('Socket listening for:', event);\r\n        },\r\n        disconnect: () => {\r\n          console.log('Socket disconnected');\r\n        }\r\n      };\r\n\r\n      setSocket(mockSocket);\r\n    } else {\r\n      setSocket(null);\r\n      setConversations([]);\r\n      setMessages({});\r\n      setActiveConversation(null);\r\n      setUnreadCount(0);\r\n    }\r\n  }, [currentUser]);\r\n\r\n  const sendMessage = (conversationId, text) => {\r\n    if (!socket || !text.trim()) return;\r\n\r\n    const messageData = {\r\n      conversationId,\r\n      text: text.trim(),\r\n      senderId: currentUser.id\r\n    };\r\n\r\n    socket.emit('send_message', messageData);\r\n\r\n    // Optimistically add message to UI\r\n    const newMessage = {\r\n      id: Date.now(),\r\n      text: text.trim(),\r\n      senderId: currentUser.id,\r\n      timestamp: new Date(),\r\n      type: 'text'\r\n    };\r\n\r\n    setMessages(prev => ({\r\n      ...prev,\r\n      [conversationId]: [...(prev[conversationId] || []), newMessage]\r\n    }));\r\n\r\n    // Update conversation last message\r\n    setConversations(prev => \r\n      prev.map(conv => \r\n        conv.id === conversationId \r\n          ? { \r\n              ...conv, \r\n              lastMessage: {\r\n                text: text.trim(),\r\n                timestamp: new Date(),\r\n                senderId: currentUser.id\r\n              }\r\n            }\r\n          : conv\r\n      )\r\n    );\r\n  };\r\n\r\n  const createConversation = (participantId, participantName, participantAvatar) => {\r\n    const newConversation = {\r\n      id: Date.now(),\r\n      participants: [\r\n        { id: currentUser.id, name: currentUser.name, avatar: currentUser.avatar },\r\n        { id: participantId, name: participantName, avatar: participantAvatar }\r\n      ],\r\n      lastMessage: null,\r\n      unreadCount: 0\r\n    };\r\n\r\n    setConversations(prev => [newConversation, ...prev]);\r\n    setMessages(prev => ({ ...prev, [newConversation.id]: [] }));\r\n    setActiveConversation(newConversation.id);\r\n\r\n    return newConversation.id;\r\n  };\r\n\r\n  const markConversationAsRead = (conversationId) => {\r\n    setConversations(prev => \r\n      prev.map(conv => \r\n        conv.id === conversationId \r\n          ? { ...conv, unreadCount: 0 }\r\n          : conv\r\n      )\r\n    );\r\n\r\n    // Recalculate total unread count\r\n    const updatedConversations = conversations.map(conv => \r\n      conv.id === conversationId ? { ...conv, unreadCount: 0 } : conv\r\n    );\r\n    const totalUnread = updatedConversations.reduce((sum, conv) => sum + conv.unreadCount, 0);\r\n    setUnreadCount(totalUnread);\r\n  };\r\n\r\n  const value = {\r\n    socket,\r\n    conversations,\r\n    activeConversation,\r\n    messages,\r\n    unreadCount,\r\n    sendMessage,\r\n    createConversation,\r\n    setActiveConversation,\r\n    markConversationAsRead\r\n  };\r\n\r\n  return (\r\n    <ChatContext.Provider value={value}>\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n}; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC7E,OAASC,OAAO,KAAQ,eAAe,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAExC,KAAM,CAAAC,WAAW,cAAGP,aAAa,CAAC,CAAC,CAEnC,MAAO,MAAM,CAAAQ,OAAO,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAAC,OAAO,CAAGR,UAAU,CAACM,WAAW,CAAC,CACvC,GAAI,CAACE,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,4CAA4C,CAAC,CAC/D,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC,CAED,MAAO,MAAM,CAAAE,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAAEE,WAAY,CAAC,CAAGV,OAAO,CAAC,CAAC,CACjC,KAAM,CAACW,MAAM,CAAEC,SAAS,CAAC,CAAGd,QAAQ,CAAC,IAAI,CAAC,CAC1C,KAAM,CAACe,aAAa,CAAEC,gBAAgB,CAAC,CAAGhB,QAAQ,CAAC,EAAE,CAAC,CACtD,KAAM,CAACiB,kBAAkB,CAAEC,qBAAqB,CAAC,CAAGlB,QAAQ,CAAC,IAAI,CAAC,CAClE,KAAM,CAACmB,QAAQ,CAAEC,WAAW,CAAC,CAAGpB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAC5C,KAAM,CAACqB,WAAW,CAAEC,cAAc,CAAC,CAAGtB,QAAQ,CAAC,CAAC,CAAC,CAEjD;AACA,KAAM,CAAAuB,iBAAiB,CAAG,CACxB,CACEC,EAAE,CAAE,CAAC,CACLC,YAAY,CAAE,CACZ,CAAED,EAAE,CAAE,CAAC,CAAEE,IAAI,CAAE,cAAc,CAAEC,MAAM,CAAE,6FAA8F,CAAC,CACtI,CAAEH,EAAE,CAAE,CAAC,CAAEE,IAAI,CAAE,mBAAmB,CAAEC,MAAM,CAAE,6FAA8F,CAAC,CAC5I,CACDC,WAAW,CAAE,CACXC,IAAI,CAAE,2BAA2B,CACjCC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,IAAI,CAAG,EAAE,CAAG,EAAE,CAAC,CAAE;AAClDC,QAAQ,CAAE,CACZ,CAAC,CACDZ,WAAW,CAAE,CACf,CAAC,CACD,CACEG,EAAE,CAAE,CAAC,CACLC,YAAY,CAAE,CACZ,CAAED,EAAE,CAAE,CAAC,CAAEE,IAAI,CAAE,cAAc,CAAEC,MAAM,CAAE,6FAA8F,CAAC,CACtI,CAAEH,EAAE,CAAE,CAAC,CAAEE,IAAI,CAAE,oBAAoB,CAAEC,MAAM,CAAE,6FAA8F,CAAC,CAC7I,CACDC,WAAW,CAAE,CACXC,IAAI,CAAE,2BAA2B,CACjCC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,IAAI,CAAG,EAAE,CAAG,EAAE,CAAG,CAAC,CAAC,CAAE;AACtDC,QAAQ,CAAE,CACZ,CAAC,CACDZ,WAAW,CAAE,CACf,CAAC,CACF,CAED;AACA,KAAM,CAAAa,YAAY,CAAG,CACnB,CAAC,CAAE,CACD,CACEV,EAAE,CAAE,CAAC,CACLK,IAAI,CAAE,2CAA2C,CACjDI,QAAQ,CAAE,CAAC,CACXH,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,IAAI,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,CAAE;AACvDG,IAAI,CAAE,MACR,CAAC,CACD,CACEX,EAAE,CAAE,CAAC,CACLK,IAAI,CAAE,gFAAgF,CACtFI,QAAQ,CAAE,CAAC,CACXH,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,IAAI,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,CAAE;AACvDG,IAAI,CAAE,MACR,CAAC,CACD,CACEX,EAAE,CAAE,CAAC,CACLK,IAAI,CAAE,2BAA2B,CACjCI,QAAQ,CAAE,CAAC,CACXH,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,IAAI,CAAG,EAAE,CAAG,EAAE,CAAC,CAAE;AAClDG,IAAI,CAAE,MACR,CAAC,CACF,CACD,CAAC,CAAE,CACD,CACEX,EAAE,CAAE,CAAC,CACLK,IAAI,CAAE,sBAAsB,CAC5BI,QAAQ,CAAE,CAAC,CACXH,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,IAAI,CAAG,EAAE,CAAG,EAAE,CAAG,CAAC,CAAC,CAAE;AACtDG,IAAI,CAAE,MACR,CAAC,CACD,CACEX,EAAE,CAAE,CAAC,CACLK,IAAI,CAAE,2BAA2B,CACjCI,QAAQ,CAAE,CAAC,CACXH,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,IAAI,CAAG,EAAE,CAAG,EAAE,CAAG,CAAC,CAAC,CAAE;AACtDG,IAAI,CAAE,MACR,CAAC,CAEL,CAAC,CAEDlC,SAAS,CAAC,IAAM,CACd,GAAIW,WAAW,CAAE,CACf;AACAI,gBAAgB,CAACO,iBAAiB,CAAC,CACnCH,WAAW,CAACc,YAAY,CAAC,CAEzB;AACA,KAAM,CAAAE,WAAW,CAAGb,iBAAiB,CAACc,MAAM,CAAC,CAACC,GAAG,CAAEC,IAAI,GAAKD,GAAG,CAAGC,IAAI,CAAClB,WAAW,CAAE,CAAC,CAAC,CACtFC,cAAc,CAACc,WAAW,CAAC,CAE3B;AACA,KAAM,CAAAI,UAAU,CAAG,CACjBC,IAAI,CAAEA,CAACC,KAAK,CAAEC,IAAI,GAAK,CACrBC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAEH,KAAK,CAAEC,IAAI,CAAC,CACxC;AACA,GAAID,KAAK,GAAK,cAAc,CAAE,CAC5BI,UAAU,CAAC,IAAM,CACf,KAAM,CAAAC,UAAU,CAAG,CACjBvB,EAAE,CAAEO,IAAI,CAACC,GAAG,CAAC,CAAC,CACdH,IAAI,CAAEc,IAAI,CAACd,IAAI,CACfI,QAAQ,CAAErB,WAAW,CAACY,EAAE,CACxBM,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CACrBI,IAAI,CAAE,MACR,CAAC,CAEDf,WAAW,CAAC4B,IAAI,GAAK,CACnB,GAAGA,IAAI,CACP,CAACL,IAAI,CAACM,cAAc,EAAG,CAAC,IAAID,IAAI,CAACL,IAAI,CAACM,cAAc,CAAC,EAAI,EAAE,CAAC,CAAEF,UAAU,CAC1E,CAAC,CAAC,CAAC,CACL,CAAC,CAAE,IAAI,CAAC,CACV,CACF,CAAC,CACDG,EAAE,CAAEA,CAACR,KAAK,CAAES,QAAQ,GAAK,CACvBP,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEH,KAAK,CAAC,CAC7C,CAAC,CACDU,UAAU,CAAEA,CAAA,GAAM,CAChBR,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC,CACpC,CACF,CAAC,CAED/B,SAAS,CAAC0B,UAAU,CAAC,CACvB,CAAC,IAAM,CACL1B,SAAS,CAAC,IAAI,CAAC,CACfE,gBAAgB,CAAC,EAAE,CAAC,CACpBI,WAAW,CAAC,CAAC,CAAC,CAAC,CACfF,qBAAqB,CAAC,IAAI,CAAC,CAC3BI,cAAc,CAAC,CAAC,CAAC,CACnB,CACF,CAAC,CAAE,CAACV,WAAW,CAAC,CAAC,CAEjB,KAAM,CAAAyC,WAAW,CAAGA,CAACJ,cAAc,CAAEpB,IAAI,GAAK,CAC5C,GAAI,CAAChB,MAAM,EAAI,CAACgB,IAAI,CAACyB,IAAI,CAAC,CAAC,CAAE,OAE7B,KAAM,CAAAC,WAAW,CAAG,CAClBN,cAAc,CACdpB,IAAI,CAAEA,IAAI,CAACyB,IAAI,CAAC,CAAC,CACjBrB,QAAQ,CAAErB,WAAW,CAACY,EACxB,CAAC,CAEDX,MAAM,CAAC4B,IAAI,CAAC,cAAc,CAAEc,WAAW,CAAC,CAExC;AACA,KAAM,CAAAR,UAAU,CAAG,CACjBvB,EAAE,CAAEO,IAAI,CAACC,GAAG,CAAC,CAAC,CACdH,IAAI,CAAEA,IAAI,CAACyB,IAAI,CAAC,CAAC,CACjBrB,QAAQ,CAAErB,WAAW,CAACY,EAAE,CACxBM,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CACrBI,IAAI,CAAE,MACR,CAAC,CAEDf,WAAW,CAAC4B,IAAI,GAAK,CACnB,GAAGA,IAAI,CACP,CAACC,cAAc,EAAG,CAAC,IAAID,IAAI,CAACC,cAAc,CAAC,EAAI,EAAE,CAAC,CAAEF,UAAU,CAChE,CAAC,CAAC,CAAC,CAEH;AACA/B,gBAAgB,CAACgC,IAAI,EACnBA,IAAI,CAACQ,GAAG,CAACjB,IAAI,EACXA,IAAI,CAACf,EAAE,GAAKyB,cAAc,CACtB,CACE,GAAGV,IAAI,CACPX,WAAW,CAAE,CACXC,IAAI,CAAEA,IAAI,CAACyB,IAAI,CAAC,CAAC,CACjBxB,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CACrBE,QAAQ,CAAErB,WAAW,CAACY,EACxB,CACF,CAAC,CACDe,IACN,CACF,CAAC,CACH,CAAC,CAED,KAAM,CAAAkB,kBAAkB,CAAGA,CAACC,aAAa,CAAEC,eAAe,CAAEC,iBAAiB,GAAK,CAChF,KAAM,CAAAC,eAAe,CAAG,CACtBrC,EAAE,CAAEO,IAAI,CAACC,GAAG,CAAC,CAAC,CACdP,YAAY,CAAE,CACZ,CAAED,EAAE,CAAEZ,WAAW,CAACY,EAAE,CAAEE,IAAI,CAAEd,WAAW,CAACc,IAAI,CAAEC,MAAM,CAAEf,WAAW,CAACe,MAAO,CAAC,CAC1E,CAAEH,EAAE,CAAEkC,aAAa,CAAEhC,IAAI,CAAEiC,eAAe,CAAEhC,MAAM,CAAEiC,iBAAkB,CAAC,CACxE,CACDhC,WAAW,CAAE,IAAI,CACjBP,WAAW,CAAE,CACf,CAAC,CAEDL,gBAAgB,CAACgC,IAAI,EAAI,CAACa,eAAe,CAAE,GAAGb,IAAI,CAAC,CAAC,CACpD5B,WAAW,CAAC4B,IAAI,GAAK,CAAE,GAAGA,IAAI,CAAE,CAACa,eAAe,CAACrC,EAAE,EAAG,EAAG,CAAC,CAAC,CAAC,CAC5DN,qBAAqB,CAAC2C,eAAe,CAACrC,EAAE,CAAC,CAEzC,MAAO,CAAAqC,eAAe,CAACrC,EAAE,CAC3B,CAAC,CAED,KAAM,CAAAsC,sBAAsB,CAAIb,cAAc,EAAK,CACjDjC,gBAAgB,CAACgC,IAAI,EACnBA,IAAI,CAACQ,GAAG,CAACjB,IAAI,EACXA,IAAI,CAACf,EAAE,GAAKyB,cAAc,CACtB,CAAE,GAAGV,IAAI,CAAElB,WAAW,CAAE,CAAE,CAAC,CAC3BkB,IACN,CACF,CAAC,CAED;AACA,KAAM,CAAAwB,oBAAoB,CAAGhD,aAAa,CAACyC,GAAG,CAACjB,IAAI,EACjDA,IAAI,CAACf,EAAE,GAAKyB,cAAc,CAAG,CAAE,GAAGV,IAAI,CAAElB,WAAW,CAAE,CAAE,CAAC,CAAGkB,IAC7D,CAAC,CACD,KAAM,CAAAH,WAAW,CAAG2B,oBAAoB,CAAC1B,MAAM,CAAC,CAACC,GAAG,CAAEC,IAAI,GAAKD,GAAG,CAAGC,IAAI,CAAClB,WAAW,CAAE,CAAC,CAAC,CACzFC,cAAc,CAACc,WAAW,CAAC,CAC7B,CAAC,CAED,KAAM,CAAA4B,KAAK,CAAG,CACZnD,MAAM,CACNE,aAAa,CACbE,kBAAkB,CAClBE,QAAQ,CACRE,WAAW,CACXgC,WAAW,CACXI,kBAAkB,CAClBvC,qBAAqB,CACrB4C,sBACF,CAAC,CAED,mBACE1D,IAAA,CAACC,WAAW,CAAC4D,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAArD,QAAA,CAChCA,QAAQ,CACW,CAAC,CAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}