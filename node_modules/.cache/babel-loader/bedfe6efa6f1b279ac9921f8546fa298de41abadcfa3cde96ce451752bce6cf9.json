{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  // Get auth token from localStorage\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  // Set auth token in localStorage\n  setToken(token) {\n    localStorage.setItem('token', token);\n  }\n\n  // Remove auth token from localStorage\n  removeToken() {\n    localStorage.removeItem('token');\n  }\n\n  // Get headers for API requests\n  getHeaders() {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    const token = this.getToken();\n    if (token) {\n      headers.Authorization = `Bearer ${token}`;\n    }\n    return headers;\n  }\n\n  // Make API request\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: this.getHeaders(),\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Something went wrong');\n      }\n      return data;\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Auth endpoints\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n  async login(credentials) {\n    return this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n  }\n  async getCurrentUser() {\n    return this.request('/auth/me');\n  }\n  async logout() {\n    this.removeToken();\n    return {\n      success: true\n    };\n  }\n\n  // User endpoints\n  async getUserProfile() {\n    return this.request('/users/profile');\n  }\n  async updateUserProfile(profileData) {\n    return this.request('/users/profile', {\n      method: 'PUT',\n      body: JSON.stringify(profileData)\n    });\n  }\n\n  // Teacher endpoints\n  async getTeachers(params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    return this.request(`/teachers?${queryString}`);\n  }\n  async getTeacher(id) {\n    return this.request(`/teachers/${id}`);\n  }\n  async getFeaturedTeachers() {\n    return this.request('/teachers/featured');\n  }\n  async createTeacherProfile(profileData) {\n    return this.request('/teachers', {\n      method: 'POST',\n      body: JSON.stringify(profileData)\n    });\n  }\n  async updateTeacherProfile(id, profileData) {\n    return this.request(`/teachers/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(profileData)\n    });\n  }\n\n  // Booking endpoints\n  async createBooking(bookingData) {\n    return this.request('/bookings', {\n      method: 'POST',\n      body: JSON.stringify(bookingData)\n    });\n  }\n  async getUserBookings() {\n    return this.request('/bookings');\n  }\n\n  // Message endpoints\n  async getConversations() {\n    return this.request('/messages/conversations');\n  }\n  async sendMessage(messageData) {\n    return this.request('/messages', {\n      method: 'POST',\n      body: JSON.stringify(messageData)\n    });\n  }\n\n  // Payment endpoints\n  async createSubscription(subscriptionData) {\n    return this.request('/payments/subscribe', {\n      method: 'POST',\n      body: JSON.stringify(subscriptionData)\n    });\n  }\n  async getUserSubscriptions() {\n    return this.request('/payments/subscriptions');\n  }\n\n  // Health check\n  async healthCheck() {\n    return this.request('/health');\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","baseURL","getToken","localStorage","getItem","setToken","token","setItem","removeToken","removeItem","getHeaders","headers","Authorization","request","endpoint","options","url","config","response","fetch","data","json","ok","Error","message","error","console","register","userData","method","body","JSON","stringify","login","credentials","getCurrentUser","logout","success","getUserProfile","updateUserProfile","profileData","getTeachers","params","queryString","URLSearchParams","toString","getTeacher","id","getFeaturedTeachers","createTeacherProfile","updateTeacherProfile","createBooking","bookingData","getUserBookings","getConversations","sendMessage","messageData","createSubscription","subscriptionData","getUserSubscriptions","healthCheck"],"sources":["C:/Users/admin/Desktop/testbementor/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nclass ApiService {\r\n  constructor() {\r\n    this.baseURL = API_BASE_URL;\r\n  }\r\n\r\n  // Get auth token from localStorage\r\n  getToken() {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  // Set auth token in localStorage\r\n  setToken(token) {\r\n    localStorage.setItem('token', token);\r\n  }\r\n\r\n  // Remove auth token from localStorage\r\n  removeToken() {\r\n    localStorage.removeItem('token');\r\n  }\r\n\r\n  // Get headers for API requests\r\n  getHeaders() {\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n\r\n    const token = this.getToken();\r\n    if (token) {\r\n      headers.Authorization = `Bearer ${token}`;\r\n    }\r\n\r\n    return headers;\r\n  }\r\n\r\n  // Make API request\r\n  async request(endpoint, options = {}) {\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    const config = {\r\n      headers: this.getHeaders(),\r\n      ...options,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Something went wrong');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('API request failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Auth endpoints\r\n  async register(userData) {\r\n    return this.request('/auth/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData),\r\n    });\r\n  }\r\n\r\n  async login(credentials) {\r\n    return this.request('/auth/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify(credentials),\r\n    });\r\n  }\r\n\r\n  async getCurrentUser() {\r\n    return this.request('/auth/me');\r\n  }\r\n\r\n  async logout() {\r\n    this.removeToken();\r\n    return { success: true };\r\n  }\r\n\r\n  // User endpoints\r\n  async getUserProfile() {\r\n    return this.request('/users/profile');\r\n  }\r\n\r\n  async updateUserProfile(profileData) {\r\n    return this.request('/users/profile', {\r\n      method: 'PUT',\r\n      body: JSON.stringify(profileData),\r\n    });\r\n  }\r\n\r\n  // Teacher endpoints\r\n  async getTeachers(params = {}) {\r\n    const queryString = new URLSearchParams(params).toString();\r\n    return this.request(`/teachers?${queryString}`);\r\n  }\r\n\r\n  async getTeacher(id) {\r\n    return this.request(`/teachers/${id}`);\r\n  }\r\n\r\n  async getFeaturedTeachers() {\r\n    return this.request('/teachers/featured');\r\n  }\r\n\r\n  async createTeacherProfile(profileData) {\r\n    return this.request('/teachers', {\r\n      method: 'POST',\r\n      body: JSON.stringify(profileData),\r\n    });\r\n  }\r\n\r\n  async updateTeacherProfile(id, profileData) {\r\n    return this.request(`/teachers/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(profileData),\r\n    });\r\n  }\r\n\r\n  // Booking endpoints\r\n  async createBooking(bookingData) {\r\n    return this.request('/bookings', {\r\n      method: 'POST',\r\n      body: JSON.stringify(bookingData),\r\n    });\r\n  }\r\n\r\n  async getUserBookings() {\r\n    return this.request('/bookings');\r\n  }\r\n\r\n  // Message endpoints\r\n  async getConversations() {\r\n    return this.request('/messages/conversations');\r\n  }\r\n\r\n  async sendMessage(messageData) {\r\n    return this.request('/messages', {\r\n      method: 'POST',\r\n      body: JSON.stringify(messageData),\r\n    });\r\n  }\r\n\r\n  // Payment endpoints\r\n  async createSubscription(subscriptionData) {\r\n    return this.request('/payments/subscribe', {\r\n      method: 'POST',\r\n      body: JSON.stringify(subscriptionData),\r\n    });\r\n  }\r\n\r\n  async getUserSubscriptions() {\r\n    return this.request('/payments/subscriptions');\r\n  }\r\n\r\n  // Health check\r\n  async healthCheck() {\r\n    return this.request('/health');\r\n  }\r\n}\r\n\r\nexport default new ApiService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}