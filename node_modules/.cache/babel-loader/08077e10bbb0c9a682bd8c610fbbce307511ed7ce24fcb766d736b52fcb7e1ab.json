{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\testbementor\\\\src\\\\contexts\\\\ChatContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport { useAuth } from './AuthContext';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext();\nexport const useChat = () => {\n  _s();\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n_s(useChat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ChatProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    currentUser\n  } = useAuth();\n  const [socket, setSocket] = useState(null);\n  const [conversations, setConversations] = useState([]);\n  const [activeConversation, setActiveConversation] = useState(null);\n  const [messages, setMessages] = useState({});\n  const [unreadCount, setUnreadCount] = useState(0);\n\n  // Mock conversations data\n  const mockConversations = [{\n    id: 1,\n    participants: [{\n      id: 1,\n      name: 'John Student',\n      avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face'\n    }, {\n      id: 2,\n      name: 'Dr. Sarah Johnson',\n      avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face'\n    }],\n    lastMessage: {\n      text: 'Thank you for the lesson!',\n      timestamp: new Date(Date.now() - 1000 * 60 * 30),\n      // 30 minutes ago\n      senderId: 1\n    },\n    unreadCount: 0\n  }, {\n    id: 2,\n    participants: [{\n      id: 1,\n      name: 'John Student',\n      avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face'\n    }, {\n      id: 3,\n      name: 'Prof. Michael Chen',\n      avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face'\n    }],\n    lastMessage: {\n      text: 'When is our next session?',\n      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2),\n      // 2 hours ago\n      senderId: 3\n    },\n    unreadCount: 1\n  }];\n\n  // Mock messages data\n  const mockMessages = {\n    1: [{\n      id: 1,\n      text: 'Hi Dr. Johnson, I need help with calculus',\n      senderId: 1,\n      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24),\n      // 1 day ago\n      type: 'text'\n    }, {\n      id: 2,\n      text: 'Of course! I\\'d be happy to help. What specific topic are you struggling with?',\n      senderId: 2,\n      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 23),\n      // 23 hours ago\n      type: 'text'\n    }, {\n      id: 3,\n      text: 'Thank you for the lesson!',\n      senderId: 1,\n      timestamp: new Date(Date.now() - 1000 * 60 * 30),\n      // 30 minutes ago\n      type: 'text'\n    }],\n    2: [{\n      id: 4,\n      text: 'Hello Professor Chen',\n      senderId: 1,\n      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 3),\n      // 3 hours ago\n      type: 'text'\n    }, {\n      id: 5,\n      text: 'When is our next session?',\n      senderId: 3,\n      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2),\n      // 2 hours ago\n      type: 'text'\n    }]\n  };\n  useEffect(() => {\n    if (currentUser) {\n      // Initialize conversations and messages\n      setConversations(mockConversations);\n      setMessages(mockMessages);\n\n      // Calculate unread count\n      const totalUnread = mockConversations.reduce((sum, conv) => sum + conv.unreadCount, 0);\n      setUnreadCount(totalUnread);\n\n      // Mock Socket.IO connection\n      const mockSocket = {\n        emit: (event, data) => {\n          console.log('Socket emit:', event, data);\n          // Simulate message delivery\n          if (event === 'send_message') {\n            setTimeout(() => {\n              const newMessage = {\n                id: Date.now(),\n                text: data.text,\n                senderId: currentUser.id,\n                timestamp: new Date(),\n                type: 'text'\n              };\n              setMessages(prev => ({\n                ...prev,\n                [data.conversationId]: [...(prev[data.conversationId] || []), newMessage]\n              }));\n            }, 1000);\n          }\n        },\n        on: (event, callback) => {\n          console.log('Socket listening for:', event);\n        },\n        disconnect: () => {\n          console.log('Socket disconnected');\n        }\n      };\n      setSocket(mockSocket);\n    } else {\n      setSocket(null);\n      setConversations([]);\n      setMessages({});\n      setActiveConversation(null);\n      setUnreadCount(0);\n    }\n  }, [currentUser]);\n  const sendMessage = (conversationId, text) => {\n    if (!socket || !text.trim()) return;\n    const messageData = {\n      conversationId,\n      text: text.trim(),\n      senderId: currentUser.id\n    };\n    socket.emit('send_message', messageData);\n\n    // Optimistically add message to UI\n    const newMessage = {\n      id: Date.now(),\n      text: text.trim(),\n      senderId: currentUser.id,\n      timestamp: new Date(),\n      type: 'text'\n    };\n    setMessages(prev => ({\n      ...prev,\n      [conversationId]: [...(prev[conversationId] || []), newMessage]\n    }));\n\n    // Update conversation last message\n    setConversations(prev => prev.map(conv => conv.id === conversationId ? {\n      ...conv,\n      lastMessage: {\n        text: text.trim(),\n        timestamp: new Date(),\n        senderId: currentUser.id\n      }\n    } : conv));\n  };\n  const createConversation = (participantId, participantName, participantAvatar) => {\n    const newConversation = {\n      id: Date.now(),\n      participants: [{\n        id: currentUser.id,\n        name: currentUser.name,\n        avatar: currentUser.avatar\n      }, {\n        id: participantId,\n        name: participantName,\n        avatar: participantAvatar\n      }],\n      lastMessage: null,\n      unreadCount: 0\n    };\n    setConversations(prev => [newConversation, ...prev]);\n    setMessages(prev => ({\n      ...prev,\n      [newConversation.id]: []\n    }));\n    setActiveConversation(newConversation.id);\n    return newConversation.id;\n  };\n  const markConversationAsRead = conversationId => {\n    setConversations(prev => prev.map(conv => conv.id === conversationId ? {\n      ...conv,\n      unreadCount: 0\n    } : conv));\n\n    // Recalculate total unread count\n    const updatedConversations = conversations.map(conv => conv.id === conversationId ? {\n      ...conv,\n      unreadCount: 0\n    } : conv);\n    const totalUnread = updatedConversations.reduce((sum, conv) => sum + conv.unreadCount, 0);\n    setUnreadCount(totalUnread);\n  };\n  const value = {\n    socket,\n    conversations,\n    activeConversation,\n    messages,\n    unreadCount,\n    sendMessage,\n    createConversation,\n    setActiveConversation,\n    markConversationAsRead\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n};\n_s2(ChatProvider, \"0xCdpSrUmHeRmecQILVaJpvZhwY=\", false, function () {\n  return [useAuth];\n});\n_c = ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","io","useAuth","toast","jsxDEV","_jsxDEV","ChatContext","useChat","_s","context","Error","ChatProvider","children","_s2","currentUser","socket","setSocket","conversations","setConversations","activeConversation","setActiveConversation","messages","setMessages","unreadCount","setUnreadCount","mockConversations","id","participants","name","avatar","lastMessage","text","timestamp","Date","now","senderId","mockMessages","type","totalUnread","reduce","sum","conv","mockSocket","emit","event","data","console","log","setTimeout","newMessage","prev","conversationId","on","callback","disconnect","sendMessage","trim","messageData","map","createConversation","participantId","participantName","participantAvatar","newConversation","markConversationAsRead","updatedConversations","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/admin/Desktop/testbementor/src/contexts/ChatContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport { useAuth } from './AuthContext';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst ChatContext = createContext();\r\n\r\nexport const useChat = () => {\r\n  const context = useContext(ChatContext);\r\n  if (!context) {\r\n    throw new Error('useChat must be used within a ChatProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const ChatProvider = ({ children }) => {\r\n  const { currentUser } = useAuth();\r\n  const [socket, setSocket] = useState(null);\r\n  const [conversations, setConversations] = useState([]);\r\n  const [activeConversation, setActiveConversation] = useState(null);\r\n  const [messages, setMessages] = useState({});\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n\r\n  // Mock conversations data\r\n  const mockConversations = [\r\n    {\r\n      id: 1,\r\n      participants: [\r\n        { id: 1, name: 'John Student', avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face' },\r\n        { id: 2, name: 'Dr. Sarah Johnson', avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face' }\r\n      ],\r\n      lastMessage: {\r\n        text: 'Thank you for the lesson!',\r\n        timestamp: new Date(Date.now() - 1000 * 60 * 30), // 30 minutes ago\r\n        senderId: 1\r\n      },\r\n      unreadCount: 0\r\n    },\r\n    {\r\n      id: 2,\r\n      participants: [\r\n        { id: 1, name: 'John Student', avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face' },\r\n        { id: 3, name: 'Prof. Michael Chen', avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face' }\r\n      ],\r\n      lastMessage: {\r\n        text: 'When is our next session?',\r\n        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2), // 2 hours ago\r\n        senderId: 3\r\n      },\r\n      unreadCount: 1\r\n    }\r\n  ];\r\n\r\n  // Mock messages data\r\n  const mockMessages = {\r\n    1: [\r\n      {\r\n        id: 1,\r\n        text: 'Hi Dr. Johnson, I need help with calculus',\r\n        senderId: 1,\r\n        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24), // 1 day ago\r\n        type: 'text'\r\n      },\r\n      {\r\n        id: 2,\r\n        text: 'Of course! I\\'d be happy to help. What specific topic are you struggling with?',\r\n        senderId: 2,\r\n        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 23), // 23 hours ago\r\n        type: 'text'\r\n      },\r\n      {\r\n        id: 3,\r\n        text: 'Thank you for the lesson!',\r\n        senderId: 1,\r\n        timestamp: new Date(Date.now() - 1000 * 60 * 30), // 30 minutes ago\r\n        type: 'text'\r\n      }\r\n    ],\r\n    2: [\r\n      {\r\n        id: 4,\r\n        text: 'Hello Professor Chen',\r\n        senderId: 1,\r\n        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 3), // 3 hours ago\r\n        type: 'text'\r\n      },\r\n      {\r\n        id: 5,\r\n        text: 'When is our next session?',\r\n        senderId: 3,\r\n        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2), // 2 hours ago\r\n        type: 'text'\r\n      }\r\n    ]\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      // Initialize conversations and messages\r\n      setConversations(mockConversations);\r\n      setMessages(mockMessages);\r\n      \r\n      // Calculate unread count\r\n      const totalUnread = mockConversations.reduce((sum, conv) => sum + conv.unreadCount, 0);\r\n      setUnreadCount(totalUnread);\r\n\r\n      // Mock Socket.IO connection\r\n      const mockSocket = {\r\n        emit: (event, data) => {\r\n          console.log('Socket emit:', event, data);\r\n          // Simulate message delivery\r\n          if (event === 'send_message') {\r\n            setTimeout(() => {\r\n              const newMessage = {\r\n                id: Date.now(),\r\n                text: data.text,\r\n                senderId: currentUser.id,\r\n                timestamp: new Date(),\r\n                type: 'text'\r\n              };\r\n              \r\n              setMessages(prev => ({\r\n                ...prev,\r\n                [data.conversationId]: [...(prev[data.conversationId] || []), newMessage]\r\n              }));\r\n            }, 1000);\r\n          }\r\n        },\r\n        on: (event, callback) => {\r\n          console.log('Socket listening for:', event);\r\n        },\r\n        disconnect: () => {\r\n          console.log('Socket disconnected');\r\n        }\r\n      };\r\n\r\n      setSocket(mockSocket);\r\n    } else {\r\n      setSocket(null);\r\n      setConversations([]);\r\n      setMessages({});\r\n      setActiveConversation(null);\r\n      setUnreadCount(0);\r\n    }\r\n  }, [currentUser]);\r\n\r\n  const sendMessage = (conversationId, text) => {\r\n    if (!socket || !text.trim()) return;\r\n\r\n    const messageData = {\r\n      conversationId,\r\n      text: text.trim(),\r\n      senderId: currentUser.id\r\n    };\r\n\r\n    socket.emit('send_message', messageData);\r\n\r\n    // Optimistically add message to UI\r\n    const newMessage = {\r\n      id: Date.now(),\r\n      text: text.trim(),\r\n      senderId: currentUser.id,\r\n      timestamp: new Date(),\r\n      type: 'text'\r\n    };\r\n\r\n    setMessages(prev => ({\r\n      ...prev,\r\n      [conversationId]: [...(prev[conversationId] || []), newMessage]\r\n    }));\r\n\r\n    // Update conversation last message\r\n    setConversations(prev => \r\n      prev.map(conv => \r\n        conv.id === conversationId \r\n          ? { \r\n              ...conv, \r\n              lastMessage: {\r\n                text: text.trim(),\r\n                timestamp: new Date(),\r\n                senderId: currentUser.id\r\n              }\r\n            }\r\n          : conv\r\n      )\r\n    );\r\n  };\r\n\r\n  const createConversation = (participantId, participantName, participantAvatar) => {\r\n    const newConversation = {\r\n      id: Date.now(),\r\n      participants: [\r\n        { id: currentUser.id, name: currentUser.name, avatar: currentUser.avatar },\r\n        { id: participantId, name: participantName, avatar: participantAvatar }\r\n      ],\r\n      lastMessage: null,\r\n      unreadCount: 0\r\n    };\r\n\r\n    setConversations(prev => [newConversation, ...prev]);\r\n    setMessages(prev => ({ ...prev, [newConversation.id]: [] }));\r\n    setActiveConversation(newConversation.id);\r\n\r\n    return newConversation.id;\r\n  };\r\n\r\n  const markConversationAsRead = (conversationId) => {\r\n    setConversations(prev => \r\n      prev.map(conv => \r\n        conv.id === conversationId \r\n          ? { ...conv, unreadCount: 0 }\r\n          : conv\r\n      )\r\n    );\r\n\r\n    // Recalculate total unread count\r\n    const updatedConversations = conversations.map(conv => \r\n      conv.id === conversationId ? { ...conv, unreadCount: 0 } : conv\r\n    );\r\n    const totalUnread = updatedConversations.reduce((sum, conv) => sum + conv.unreadCount, 0);\r\n    setUnreadCount(totalUnread);\r\n  };\r\n\r\n  const value = {\r\n    socket,\r\n    conversations,\r\n    activeConversation,\r\n    messages,\r\n    unreadCount,\r\n    sendMessage,\r\n    createConversation,\r\n    setActiveConversation,\r\n    markConversationAsRead\r\n  };\r\n\r\n  return (\r\n    <ChatContext.Provider value={value}>\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}